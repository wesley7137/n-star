 Spiking Neural Network (SNN) simulators and how you can use them to create 3D visualizations:

NEST (Neural Simulation Tool):

Overview: NEST is a simulator designed for networks of spiking neurons of any size. It's particularly well-suited for modeling large networks efficiently and is often used in neuroscience research.
Visualization: While NEST itself is focused on the simulation aspect and does not provide 3D visualization tools, it allows you to record the spikes and states of neurons during simulations. This data can be exported and used with other software tools for visualization.
Exporting Data: You can use Python with NEST to extract the simulation data, which can then be fed into visualization software like MATLAB, Python libraries like Matplotlib for 2D plotting, or into 3D graphics software like Blender for detailed visualizations.
BindsNET:

Overview: BindsNET is built on top of the PyTorch machine learning library, which allows for rapid prototyping of SNNs and can leverage GPUs for computation. It's user-friendly and suitable for those who are familiar with PyTorch.
Visualization: BindsNET offers built-in capabilities for simple visualizations and monitoring of the network during simulation. For more complex visualizations, you can export the spike data.
Exporting Data: The spike data from BindsNET can be easily exported as it uses PyTorch's data structures. You can then use 3D visualization libraries in Python, such as Mayavi or PyVista, to create 3D visualizations or again use Blender for more sophisticated animations.
To create the 3D visualizations like the ones in the images you've provided using data from these simulators, here are some suggested steps:

Step 1: Simulate and Record Data

Use NEST or BindsNET to create your SNN model. Define the architecture, neuron models, synapses, and input data.
Run the simulation and record the necessary data, such as spike times, neuron states, or synaptic weights over time.
Step 2: Process the Data

Process the recorded data to be in a format suitable for visualization. For instance, you might want to normalize the data or convert spike times into a format that represents firing neurons over time.
Step 3: Import into Visualization Software

Use a 3D visualization tool like Blender to import the processed data.
Create a script in Blender using Python to generate the 3D structure of the SNN, where neurons are nodes and synapses are connections between them.
Animate the activity by making neurons light up or change color based on the spike data. Similarly, animate synaptic activity if desired.
Step 4: Enhance and Render

Enhance the visualization with additional features such as labels, a legend, or interactive elements if creating a real-time application.
Use Blender's rendering capabilities to produce a high-quality output of the visualization that can be used for presentations, papers, or educational purposes.
Using these simulators and following these steps should allow you to recreate detailed and accurate 3D visualizations of the SNN's activity. Remember that Blender has a steep learning curve, so you might need to refer to tutorials specific to scientific visualization if you are not already familiar with the software.